<?php
namespace LinkingYou\ContaoSlick\Module;

use Contao\BackendTemplate;
use Contao\FilesModel;
use Contao\Module;
use LinkingYou\ContaoSlick\Model\ContaoSlickModel;
use LinkingYou\ContaoSlick\Model\ContaoSlickSettingsModel;

/**
 * Contao-Slick Extension for Contao Open Source
 *
 * Based on http://kenwheeler.github.io/slick/
 *
 * @copyright  Copyright (c) 2017, Frank Müller
 * @author     Frank Müller <frank.mueller@linking-you.de>
 * @license    http://opensource.org/licenses/lgpl-3.0.html LGPL
 */

class ModuleContaoSlick extends Module
{

    /**
     * Template
     * @var string
     */
    protected $strTemplate = 'mod_contaoslick';

    public function generate()
    {
        if (TL_MODE == 'BE')
        {
            $objTemplate = new BackendTemplate('be_wildcard');

            $objTemplate->wildcard = ' ';
            $objTemplate->title = $this->headline;
            $objTemplate->id = $this->id;
            $objTemplate->link = $this->name;

            return $objTemplate->parse();
        }

        return parent::generate(); // TODO: Change the autogenerated stub
    }


    protected function compile()
    {

        // Slick laden (enthält Title, Bilder, ImageSize)
        if (!$this->contaoslick_slick) {
            return;
        }

        $slick = ContaoSlickModel::findByPk($this->contaoslick_slick);
        if(!$slick) {
            echo 'Slider not found';
            return;
        }

        $images = unserialize($slick->imagesOrder);

        switch ($slick->slideOrder) {
            case 'timesync' :
                $images = $this->syncTimeToArray($images, $slick);
                break;
            case 'shuffle' :
                shuffle($images);
        }


        // Contao Bild-Größen verwenden
        $image_size = unserialize($slick->imageSize);

        // Slicks durchgehen und Bilderpfade hinzufügen
        $tmp = array();
        foreach ($images as $image) {
            $imageObject = FilesModel::findByUuid($image);

            if (is_file(TL_ROOT . '/' . $imageObject->path)) {

                // Picture-Objekt erzeugen und übergeben
                $picture = \Picture::create($imageObject->path, $image_size);
                $item['picture'] = $picture->getTemplateData();

                // Meta-Daten holen und Bild zuweisen
                global $objPage;
                $imageMeta = $this->getMetaData($imageObject->meta, $objPage->language);

                // In Contao gibt es in der Dateiverwaltung keinen "alt"-Tag :-(
                $item['picture']['alt'] = specialchars($imageMeta["alt"]);
                $item['picture']['title'] = specialchars($imageMeta["title"]);
                $item['picture']['caption'] = specialchars($imageMeta["caption"]);
                $item['picture']['link'] = specialchars($imageMeta["link"]);

                array_push($tmp, $item);
            }
        }

        // Bilder an Template übergeben
        $this->Template->images = $tmp;

        // Slick an Template übergeben
        $this->Template->slick = $slick;

        // Responsive Settings an Template übergeben
        $responsive_settings = ContaoSlickSettingsModel::findBy('pid', $slick->id);
        $this->Template->responsive_settings = $responsive_settings;

    }

    private function syncTimeToArray($array, $slick) {

        // Zeitpunkt, zu dem das erste Element an erster Stelle steht
        $timeAbsolutStart = mktime(0, 0, 0, date("m"), date("d"), date("Y")) * 1000;
        $timeNow = intval(microtime(true) * 1000);

        $anzahlSlides = count($array);
        $dauerSlide = $slick->speed;
        $dauerPause = $slick->autoplaySpeed;
        $gesamtZeit = ($dauerSlide + $dauerPause);

        $slideNumber = intval((($timeNow - $timeAbsolutStart) / $gesamtZeit));
        $slidesToMove = $slideNumber % $anzahlSlides;

        for($i = 1; $i <= $slidesToMove; $i++) {
            $array = $this->moveArrayToLeft($array);
        }

        return $array;
    }

    private function moveArrayToLeft($array) {
        $first = array_shift($array);
        $result = $array;
        $result[] = $first;

        return $result;
    }

}
